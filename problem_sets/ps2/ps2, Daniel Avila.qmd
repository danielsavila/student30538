---
title: "Problem Set 2: Parking Tickets"
author: "Daniel Avila"
date: "10-8-24"
format: html
---

1. “This submission is my work alone and complies with the 30538 integrity policy.” Add
 your initials to indicate your agreement: **DA**
 2. “I have uploaded the names of anyone I worked with on the problem set here” **DA**
 (2 point)
 3. Late coins used this pset: **0** Late coins left after submission: **3**
 4. Knit your ps2.qmd as an html document and print to a pdf to make ps2.pdf.
 • The PDF should not be more than 25 pages. Use head() and re-size figures when
 appropriate.
 5. Push ps2.qmd and ps2.pdf to your github repo. It is fine to use Github Desktop.
 6. Submit ps2.pdf via Gradescope (8 points)
 7. Tag your submission in Gradescope

```{python}
import pandas as pd
import numpy as np
import os
import altair as alt
import datetime as dt

path = "c:/Users/danie/Documents/GitHub/student30538/problem_sets/ps2/data"
os.chdir(path)

df = pd.read_csv("parking_tickets_one_percent.csv")
pd.options.mode.chained_assignment = None
```


 **Data cleaning continued**
 1. . For each column, how many rows are NA? Write a function which returns a two column data frame where each row is a variable, the first column of the data frame is the name of each variable, and the second column of the data frame is the number of times thatthe column is NA. Test your function. Then, report the results applied to the parking tickets data frame. There are several ways to do this, but we haven’t covered them yet in class, so you will need to work independently to set this up.

```{python}
def data_cleaning(data):
    columns = data.columns
    na_values = []

    for i in range(len(data.columns)):
        series = data.iloc[:, i].isna()
        true = len(series[series == True])
        na_values.append(true)

    output = pd.DataFrame(na_values, columns).reset_index()
    output.columns = ["column names", "NA values"]
    return output

data_cleaning(df)
```

 2. Three variables are missing much more frequently than the others. Why? (Hint: look at some rows and read the data dictionary written by ProPublica)

The three variables that are displaying the most missingness are 1) zipcode, 2) notice level, and 3) hearing_disposition. 

```{python}
series1 = df["zipcode"].isna()
series1 = series1.loc[series1 == True].reset_index()
small_list1 = list(series1.loc[:, "index"])
one = df.loc[small_list1]
v_one = one["violation_description"].value_counts()

series2 = df["notice_level"].isna()
series2 = series2.loc[series2 == True].reset_index()
small_list2 = list(series2.loc[:, "index"])
two = df.loc[small_list2]
v_two = two["violation_description"].value_counts()

series3 = df["hearing_disposition"].isna()
series3 = series3.loc[series3 == True].reset_index()
small_list3 = list(series3.loc[:, "index"])
three = df.loc[small_list3]
v_three = three["violation_description"].value_counts()

print("hearing_disposition")
print(v_three.head())

print("notice_level")
print(v_two.head())

print("zipcode")
print(v_one.head())
```

The zipcode variable indicates the zipcode associated with the vehicle registration. I would guess that if the vehicle does not have an up to date registration, is missing the registration sticker, or missing both registration sticker and plates, then when the officer writes the citation, there is no way for the officer to collect information on the zipcode that the car is registered to. So in these cases, there is a likelihood that the officer was not able to find enough identifying information to get a zipcode.

According to the ProPublica article for notice_level, if there is no data, then that would indicate that no notice was sent to the vehicle owner. Therefore, these citations were not sent to the vehicle owner. 

For the hearing_disposition, if the field is blank, then that would indicate that the ticket was not contested. Therefore for these fields, the vehicle owners did not contest the citation or there is no record of the citation.


 3. Some of the other articles on the propublica website discuss an increase in the dollar amount of the ticket for not having a city sticker. What was the old violation code and what is the new violation code?

```{python}
#identifying what were the old codes by checking the value amounts
#in one of the articles, they mentioned that one of the value amounts was raised to 200 dollars. 
sticker = df[(df["violation_description"] == "NO CITY STICKER OR IMPROPER DISPLAY") | (df["violation_description"] == "NO CITY STICKER VEHICLE UNDER/EQUAL TO 16,000 LBS.")]
sticker["violation_code"].value_counts()
```

The old code was **0964125**, and the new code was designated as **0964125B**. Not sure what the other value with 15 citations is.

 4. How much was the cost of an initial offense under each code? (You can ignore the ticket for a missing city sticker on vehicles over 16,000 pounds.)
```{python}
sticker["fine_level1_amount"].value_counts()
```

The cost of an initial offense was $120, and was then raised to $200.

**Revenue increase from “missing city sticker” tickets (20 Points)**

1. Using pandas, create a new value for violation codes which combines the two codes that
you found in the previous question. Again using pandas, collapse the data to capture
the number of missing city sticker tickets by month. Then, using Altair, plot the number
of tickets over time.

```{python}
#replacing values
new_code = "111111"
new_df = df
new_df = new_df.replace(("0964125B", "0964125"), new_code)

#collapsing data
missing_stickers = new_df[new_df["violation_code"] == new_code]
missing_stickers.loc[:,"num"] = 1
missing_stickers.loc[:, "yearmonth"] = pd.to_datetime(missing_stickers["issue_date"])
missing_stickers["yearmonth"] = missing_stickers["yearmonth"].dt.strftime("%Y - %m")

grouped = missing_stickers.groupby("yearmonth")["num"].sum().reset_index()

alt.Chart(grouped).mark_bar(
).transform_window(
    cumulative_sum = "sum(num)"
).encode(
    alt.X("yearmonth:O"),
    alt.Y("cumulative_sum:Q")
).properties(
    width=400,
    height = 200)

```

2. Suppose that your reader wants to be able to use the plot to deduce when the price
increase occurred. Add frequent or custom date labels on the x-axis of your plot such
that the date of the price increase is readily apparent. We haven’t covered Altair’s
date labeling features in class so you’ll first need to find the relevant help page in the
documentation. Which help page did you use?
```{python}
# city sticker increase happened in 2012
# https://interactive.wbez.org/citystickertickets:~:text=During%20negotiations%20for%20Chicago's%202012,rose%20from%20%24120%20to%20%24200.

# used this help page from altair documentation (to create the single value)
# https://altair-viz.github.io/user_guide/encodings/index.html


grouped["yearmonth"] = pd.to_datetime(grouped["yearmonth"])
grouped["year"] = grouped["yearmonth"].dt.strftime("%Y").astype(int)
grouped["yearmonth"] = grouped["yearmonth"].dt.strftime("%Y - %m")
grouped["pre_post_increase"] = ((grouped["year"]) >= 2012).astype(int)
grouped["pre_post_increase"] = grouped["pre_post_increase"].replace({0:"Pre Increase", 1:"Post Increase"})

tickets_graph = alt.Chart(grouped).mark_bar(
).transform_window(
    cumulative_sum = "sum(num)",).encode(
    alt.X("year:O"
    ),
    alt.Y("cumulative_sum:Q"),
    color = alt.Color("pre_post_increase:N")
).properties(
    width=400,
    height = 200)

tickets_graph
```

3. The City Clerk said the price increase would raise revenue by $16 million per year. For
now, ignore the fact that many tickets are not paid and assume that the number of tickets
issued is the same before and after the policy change. Using only the data available in
the calendar year prior to the increase, how much of a revenue increase should they have
projected? Remember that you are working with a one percent sample of the data.
Assume that the number of tickets of this type issued afterward would be constant a
you can assume that there are no late fees or collection fees, so a ticket is either paid at
its face value or is never paid.

```{python}

#need to check that each year has a relativley equal distribution 
# of tickets per year in the 1% dataset
missing_stickers_copy = missing_stickers.copy()
missing_stickers_copy["issue_date"] = pd.to_datetime(missing_stickers_copy["issue_date"])
df_names = []
df_values = []

for i in range(2007, 2019):
    filtered_data = missing_stickers_copy[missing_stickers_copy["issue_date"].dt.year == i]
    df_values.append(filtered_data.shape[0])
    df_names.append(f"{i}")

tickets_per_year = pd.DataFrame({
    "year": df_names,
    "number_of_tickets": df_values
})


print(tickets_per_year)
print(f"the expected revenue is {(193300 * 200) - (193300 * 120)}")

```

There were 1933 tickets issued in 2011 in our 1% dataset, which is roughly 8.66% of the dataset. Rounding up, we can say that there are approximately ~193,300 tickets per year, and at 200$ per ticket, we get a projected increase of $15,464,000.


4. What happened to repayment rates (percentage of tickets issued that had payments
made) on this type of ticket in the calendar year after the price increase went into effect?
Suppose for a moment that the number of tickets issued was unchanged after the price
increase. Using the new repayment rates in the year after the price increase occurred,
what would the change in revenue have been? 

```{python}
df_2011 = missing_stickers_copy[missing_stickers_copy["issue_date"].dt.year == 2011]
df_2013 = missing_stickers_copy[missing_stickers_copy["issue_date"].dt.year == 2013]
df_2011["ticket_queue"] = df_2011["ticket_queue"].astype(str)


repayment_2011 = round((df_2011[df_2011["ticket_queue"] != "Paid"].shape[0] / df_2011.shape[0] * 100), 2)

repayment_2013 = round((df_2013[df_2013["ticket_queue"] != "Paid"].shape[0] / df_2013.shape[0] * 100), 2)

print(f"2011 repayment rate: {repayment_2011}")
print(f"2013 repayment rate: {repayment_2013}")
print(f"percentage point change: {round(repayment_2011 - repayment_2013, 2)}")

print(f"revenue, with 2011 tickets with 2013 repayment rates: {round(1933 * (repayment_2013 / 100) * 200)}") 

```


5. Make a plot with the repayment rates on “missing city sticker” tickets and a vertical line
at when the new policy was introduced. Interpret.

```{python}

# finding the repayment rates for each year with the following function
# repayment rate/year  = (# of paid missing city stickers in a given year) / (# of missing city stickers in a given year)

repayment_rate_list = []
for i in range(len(missing_stickers_copy["issue_date"].dt.year.unique())):
    paid_year_df = missing_stickers_copy[(missing_stickers_copy["issue_date"].dt.year == (2007 + i)) & (missing_stickers_copy["ticket_queue"] == "Paid")]
    year_df = missing_stickers_copy[missing_stickers_copy["issue_date"].dt.year == (2007+i)]
    value = round(paid_year_df.shape[0] / year_df.shape[0], 2)
    repayment_rate_list.append(value)

repayment_rate_list
year_list = list(missing_stickers_copy["issue_date"].dt.year.unique())

#creating the dataframe from the two lists and graphing
rr_df = pd.DataFrame(year_list, repayment_rate_list).reset_index()
rr_df.columns = ["repayment_rate", "year"]


chart = alt.Chart(rr_df).mark_point().encode(
    alt.X("year:Q", scale = alt.Scale(domain = [2005, 2019])),
    alt.Y("repayment_rate:Q")
)

rule = alt.Chart().mark_rule().encode(
    x = alt.datum(2012)
)

chart + rule
```


My intepretation of this graph is that there is significant drop off in the ability of people with the missing city sticker to pay after the increased fines. Disregarding 2018 since the year is not complete in the data, from 2012 to 2017 the new mean is around .4, where in the years leading up to the price increase, the repayment rate was near .55. 


6. Suppose that the City Clerk were committed to getting more revenue from tickets. What
three violation types would you as an analyst have recommended they increase the price
of? Consider both the number of tickets issued for each violation type and the repayment
rate for each violation type. You may assume there is no behavioral response to price
changes (ie. people continue to commit violations at the same rate and repay at the same
rate). Make a plot to support your argument and explain in writing why it supports
your argument.
Headlines and sub-messages (20 points)

```{python}
violation_counts = pd.DataFrame(df["violation_description"].value_counts()).reset_index()

repayment_rate_list = []
for i in violation_counts["violation_description"]:
    #filtering the big dataframe to get number of paid per code
    paid_code = df[(df["violation_description"] == f"{i}") & (df["ticket_queue"] == "Paid")]
    paid_code_value = paid_code.shape[0]

    #filtering to get just the code
    code = df[df["violation_description"] == f"{i}"]
    code_value = code.shape[0]

    repayment_rate = round(paid_code_value / code_value, 2)
    repayment_rate_list.append(repayment_rate)
repayment_rate_list

#adding the repayment rates to the violation counts df, and only looking at the top 6 rows
violation_counts["repayment_rate"] = repayment_rate_list
subset = violation_counts[0:6]


#now interested in the fine amounts to create the size variable
size = df[df["violation_description"].isin(list(subset["violation_description"]))]
size = size.groupby(["violation_description", "fine_level1_amount"])
size.describe()

chart = alt.Chart(subset).mark_point(filled = True, size = 100).encode(
    alt.X("repayment_rate", scale = alt.Scale(domain = [.5, .9])),
    alt.Y("count", scale = alt.Scale(domain = [15000, 50000])),
    color = alt.Color("violation_description"),
)

chart
```


Looking the size groupby.describe() output, we can see that the first fine for the top six tickets is right around 50$. So it is relatively safe to assume that, for the purposes of argument, that all tickets have the same fine amount. Therefore, based on the graphic created, the top three descriptions that I would be interested in if I were the City Clerk would be the Expired Plates, Street Cleaning, and Residential Permit fines, since these three have the highest combination of repayment rates and total issued tickets. Notice that the expired plates has a significantly lower repayment rate, however the sheer volume of tickets issued for this category outweigh the lower repayment rate. The next two in terms of volume of tickets issued are street cleaning and residential permits, and both of these have very high repayment rates. 


**2**


1. The City Clerk has now begun to wonder... maybe raising ticket prices will lead to a
decline in repayment rates after all. Make a data frame where each row is a violation
description, the fraction of time that the ticket is paid, and the average level 1 fine. Sort
this dataframe based on how many total tickets of each type have been issued. Print the
rows for the 5 most common violation descriptions.

```{python}
unique_violation_descriptions = df["violation_description"].unique()
unique_violation_descriptions
payment_rate_list = []
average_fine_list = []
counts_violation_descriptions = df["violation_description"].value_counts().reset_index()

for i in unique_violation_descriptions:
    filtered_df = df[df["violation_description"] == i]
    payment_rate = filtered_df[filtered_df["ticket_queue"] == "Paid"].shape[0] / filtered_df.shape[0]
    payment_rate_list.append(payment_rate)

    average_fine = round(filtered_df["fine_level1_amount"].mean())
    average_fine_list.append(average_fine)

new_df = pd.DataFrame({"violation_description": unique_violation_descriptions,
                       "payment rate":payment_rate_list, 
                       "average fine $": average_fine_list, 
                       })

new_df = new_df.merge(counts_violation_descriptions, on = "violation_description")
new_df = new_df.sort_values("count", ascending = False)
new_df.head()

```


2. Make a scatter plot which shows the relationship between fine amount and the fraction
of tickets that are paid. Focus only on violations that appear at least 100 times. There
will be one outlier with a high fine and you can exclude that ticket type from the plot.
Then make two other plots which show the same relationship in different ways. For all
three plots, write out what are the headlines and what are sub-messages.
```{python}
data = new_df[(new_df["count"] >= 100) & (new_df["average fine $"] < 300)]

chart1 = alt.Chart(data).mark_point(filled = True).encode(
    alt.X("average fine $:Q"),
    alt.Y("payment rate:Q"),
)

chart2 = alt.Chart(data).mark_point(filled = True).encode(
    alt.X("average fine $:Q"),
    alt.Y("payment rate:Q"),
    size = alt.Size("count"),
)

chart3 = alt.Chart(data).mark_bar().encode(
    alt.X("average fine $:Q"),
    alt.Y("payment rate:Q"),
    color = alt.Color("violation_description"))

chart1 & chart2 & chart3
```


Chart 1: Chart 1 is the most straightforward interpretation, where the relationships of average fine amount and payment rates is skewed to high payment rates for lower fines. 6/10

Chart 2: Chart 2 gives us extra information relative to Chart 1, where we are now able to deduce the relative number of tickets issued for each violation description, along with the average fine and payment rate information carried over from Chart 1. 9/10

Chart 3: Chart 3 is probably the worst of the three, as it is showing an individual bar for each of the violation descriptions. We are still getting the same information, in that we are able to see the relationships between average fine and payment rates, but the chart is too colorful, too messy, and many of the bars are overlapping, making it difficult to read the visual quickly. 2/10


3. The City Clerk doesn’t understand regressions and only has time to look at one plot.
Which plot are you going to bring to them and why?
Understanding the structure of the data and summarizing it (Lecture 5, 20
Points)

```{python}
chart2
```

I would bring chart 2. The reason that I like chart 2 is that you can clearly see the relationship of how increasing fine amounts leads to decreasing payment rates, but you also get the extra information of the number of tickets issued for each fine, so if the City Clerk would like to adjust the fine amount for a ticket, they can choose from the ones that are most frequently issued if they would like to influence revenue to the greatest extent possible. 


**3** 
1. Most violation types double in price if unpaid.
• Does this hold for all violations?
• If not, find all violations with at least 100 citations that do not double. How much
does each ticket increase if unpaid?

```{python}
double = df[(df["fine_level1_amount"] != 0.5*df["fine_level2_amount"])]

#creating a new dataframe that contains the violation_description, the fine_level1, and fine_level2

double_value_counts = double["violation_description"].value_counts()
double_value_counts = double_value_counts.reset_index()

#I needed to get the violation description and the fine amount for each group next to eachother in a quick way
# using the mean was an easy way of doing that since the fine1 values are all the same for each group
mean_fine_level1 = double.groupby("violation_description")["fine_level1_amount"].mean()
mean_fine_level2 = double.groupby("violation_description")["fine_level2_amount"].mean()

#merging the variables together into a nice dataset
merged_df = double_value_counts.merge(mean_fine_level1, on = "violation_description")
merged_df = merged_df.merge(mean_fine_level2, on = "violation_description")

merged_df[merged_df["count"] > 100]
```

2. Many datasets implicitly contain information about how a case can progress. Draw a di-
agram explaining the process of moving between the different values of notice_level (if
you draw it on paper, take a picture and include the image in your write up). Draw a sec-
ond diagram explaining the different values of ticket_queue. If someone contests their
ticket and is found not liable, what happens to notice_level and to ticket_queue?
Include this in your tree drawings above.


3. Go back to your scatter plot from the previous section. We want to add labels to each
dot (which conveniently you constructed in the previous step). Implement this in two
ways: (a) label every dot with adjacent text or (b) put the text in a legend. Either
way, you will find the same problem – there are too many labels and the plot is illegible.
Revise the plots. First, do this the easy way, which is to pick the ten most commonly
used violation descriptions and mark all the other dots as “Other”. Second, for (b), try
to construct meaningful categories by marking violation descriptions which sound similar
with a common label and a common color.

```{python}
# documentation on adding labels
# https://altair-viz.github.io/gallery/scatter_with_labels.html

text = chart1.mark_text(
    align='left',
    baseline='middle'
).encode(
    text="violation_description"
)

chart1 + text
```

```{python}
#easy way
data["other"] = data["violation_description"]
data.loc[10:, "other"] = "other"

text = chart1.mark_text(
    align='left',
    baseline='top'
).encode(
    text="other",
    size = alt.value(5)
)

chart1 + text

```

```{python}
#hard way
#used chatgpt to create these lists quickly, rest was on my own

expired_registration_plates = [
    'EXPIRED PLATES OR TEMPORARY REGISTRATION',
    'EXPIRED METER OR OVERSTAY',
    'EXPIRED PLATE OR TEMPORARY REGISTRATION',
    'EXPIRED METER CENTRAL BUSINESS DISTRICT',
    'EXP. METER NON-CENTRAL BUSINESS DISTRICT'
]

street_cleaning_special_events = [
    'STREET CLEANING',
    'STREET CLEANING OR SPECIAL EVENT',
    'SPECIAL EVENTS RESTRICTION'
]

residential_parking = [
    'RESIDENTIAL PERMIT PARKING',
    'TRUCK,RV,BUS, OR TAXI RESIDENTIAL STREET',
    'TRUCK,MOTOR HOME, BUS BUSINESS STREET',
    'INDUSTRIAL PERMIT PARKING'
]

parking_standing_prohibited = [
    'PARKING/STANDING PROHIBITED ANYTIME',
    'NO STANDING/PARKING TIME RESTRICTED',
    'RUSH HOUR PARKING',
    'STOP SIGN OR TRAFFIC SIGNAL',
    'STAND, PARK, OR OTHER USE OF BUS LANE'
]

hydrant_crosswalk_sidewalk = [
    "WITHIN 15' OF FIRE HYDRANT",
    'PARK OR STAND ON CROSSWALK',
    'PARK OR STAND ON SIDEWALK',
    "20'OF CROSSWALK"
]

vehicle_plate_requirements = [
    'REAR AND FRONT PLATE REQUIRED',
    'MISSING/NONCOMPLIANT FRONT AND/OR REAR PLATE',
    'NO CITY STICKER VEHICLE UNDER/EQUAL TO 16,000 LBS.',
    'NO CITY STICKER OR IMPROPER DISPLAY',
    'IMPROPER DISPLAY OF CITY STICKER',
    'REAR PLATE REQUIRED MOTORCYCLE/TRAILER',
    'NONCOMPLIANT PLATE(S)',
    'HAZARDOUS DILAPITATED VEHICLE',
    'HAZARDOUS DILAPIDATED VEHICLE',
    'TRUCK TRAILOR/SEMI/TRAILER PROHIBITED',
    'TRUCK OR SEMI-TRAILER PROHIBITED'
]

loading_zone_private_lot = [
    'CURB LOADING ZONE',
    'NON PYMT/NON-COM VEH PARKED IN COM LOADING ZONE',
    'NO PARK IN PRIVATE LOT',
    'NO PARK IN PUBLIC LOT',
    'PARK OUTSIDE METERED SPACE'
]

obstruction_violations = [
    'BLOCK ACCESS/ALLEY/DRIVEWAY/FIRELANE',
    'PARK OR BLOCK ALLEY',
    'OBSTRUCT ROADWAY',
    'PARK OR STAND ON PARKWAY',
    'PARK OR STAND ON BICYCLE PATH',
    'PARK/STAND ON BICYCLE PATH'
]

miscellaneous_violations = [
    'DOUBLE PARKING OR STANDING',
    'SAFETY BELTS REQUIRED',
    'WINDOWS MISSING OR CRACKED BEYOND 6',
    'SMOKED/TINTED WINDOWS PARKED/STANDING',
    'OBSTRUCTED OR IMPROPERLY TINTED WINDOWS',
    'PARK VEHICLE SOLE PURPOSE OF DISPLAYING FOR SALE',
    'LAMPS BROKEN OR INOPERABLE',
    "TWO HEAD LAMPS REQUIRED VISIBLE 1000'",
    'DISABLED CURB CUT',
    'DISABLED PARKING ZONE',
    'PARK OR STAND IN BUS/TAXI/CARRIAGE STAND',
    'BURGLAR ALARM SOUNDING OVER 4 MINUTES',
    "RED REAR LAMP REQUIRED VISIBLE 500'",
    "REAR PLATE LIT AND LEGIBLE FOR 50'",
    'PARK OR STAND IN VIADUCT/UNDERPASS',
    'PARK IN CITY LOT WHEN CLOSED',
    'PARK OR STAND ON CITY PROPERTY',
    'OUTSIDE DIAGONAL MARKINGS',
    'ABANDONED VEH. FOR 7 DAYS OR INOPERABLE',
    "WRONG DIRECTION OR 12'' FROM CURB"
]

def classify_violation(violation):
    if violation in expired_registration_plates:
        return 'Expired Registration/Plates'
    elif violation in street_cleaning_special_events:
        return 'Street Cleaning/Special Events'
    elif violation in residential_parking:
        return 'Residential Parking'
    elif violation in parking_standing_prohibited:
        return 'Parking/Standing Prohibited'
    elif violation in hydrant_crosswalk_sidewalk:
        return 'Fire Hydrant/Crosswalk/Sidewalk'
    elif violation in vehicle_plate_requirements:
        return 'Vehicle/Plate Requirements'
    elif violation in loading_zone_private_lot:
        return 'Loading Zone/Private Lots'
    elif violation in obstruction_violations:
        return 'Obstruction Violations'
    else:
        return 'Miscellaneous Violations'

classified_violations = [classify_violation(v) for v in data["violation_description"]]

data["classified_violations"] = classified_violations

text2 = chart1.mark_text(
    align='left',
    baseline='top'
).encode(
    text="classified_violations",
    size = alt.value(5)
)

chart1 + text2

```